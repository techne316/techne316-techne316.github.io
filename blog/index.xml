<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Techne homepage</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blog on Techne homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data structure</title>
      <link>http://localhost:1313/blog/basic_r_1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/basic_r_1.2/</guid>
      <description>1.2 데이터의 구조 
데이터의 구조는 간단하게는 벡터vector, 리스트list, 배열array/행렬matrix, 데이터 프레임dataframe이 있습니다.
 벡터 vector : 가장 기본적인 데이터 구조로서 여러개의 수치값이 순차적으로 이뤄진 데이터 구조
 리스트 list : 벡터와 비슷한 형태로 여러 값이 순차적으로 이뤄져 있지만, 이 때 값이 값 하나를 가진 수치값일 수도 있고 여러개의 수치가 포함된 벡터 혹은 행렬 형태의 값을 받을 수도 있습니다.
 배열array : 행과 열로 이뤄진 데이터 구조로서 다차원구조를 표현가능합니다.</description>
    </item>
    
    <item>
      <title>Data structure II</title>
      <link>http://localhost:1313/blog/basic_r_1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/basic_r_1.3/</guid>
      <description>1) 배열array 벡터와는 달리 행row과 열column이 있으며 일반적으로 행*열과 같은 형식으로 데이터의 dimension을 표현할 수 있는 데이터 구조입니다. 배열과 행렬은 비슷한 듯 보이지만, 배열은 다차원의 구조(3D, 4D)를 다룰 수 있다는 점에서 행렬과는 차이가 있습니다. 다차원 구조는 간단하게는 [행,열,차원1]로 나타낼 수 있으며 같은 행과 열을 가지는 데이터를 여러개 표현하고자 할때 유용하게 쓰입니다. dim()를 이용하여 배열의 구조를 쉽게 구할 수 있습니다. 예로 들어, 최근 많이 사용하고 있는 이미지 파일을 수치화 한다고 할 때, array type의 데이터를 사용하여 가로 세로 32개의 픽셀로 이뤄진 데이터 형태 (32*32)의 흑백이미지 5장을 하나의 variable로 만들어 사용하는 것이 편리할 것입니다.</description>
    </item>
    
    <item>
      <title>Data type</title>
      <link>http://localhost:1313/blog/basic_r_1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/basic_r_1.1/</guid>
      <description>1. 데이터의 기본적인 성질와 구조 1.1 데이터의 성질 일반적인 데이터의 성질은 크게 연속형(continuous)과 범주형(categorical) 데이터로 분류 할 수 있습니다. 이러한 데이터의 성질에 따라 앞으로 사용할 수 있는 통계의 분석방법, 혹은 시각화 할 때 사용할 수 있는 plot의 종류가 제한적일 수 있으므로 이를 유의하여 사용하는 것이 좋습니다. R에서 가장 기본적으로 데이터를 인식할때 수치형(numeric), 문자형(character), 논리형(logical) 여러 형식(mode)이 존재합니다.
 수치형(numeric)이란 수의 형태로서 숫자를 다루는 데이터형식
 문자형(character)이란 문자 그대로 &amp;ldquo;Mary&amp;rdquo;, &amp;ldquo;James&amp;rdquo;, &amp;ldquo;Red&amp;rdquo; 와 같이 문자를 받아드리는 형태로서 string을 인식하는 데이터 형식</description>
    </item>
    
  </channel>
</rss>